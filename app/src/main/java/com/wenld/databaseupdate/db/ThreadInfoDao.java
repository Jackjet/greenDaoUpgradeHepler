package com.wenld.databaseupdate.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.wenld.databaseupdate.bean.ThreadInfo;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "THREAD_INFO".
*/
public class ThreadInfoDao extends AbstractDao<ThreadInfo, String> {

    public static final String TABLENAME = "THREAD_INFO";

    /**
     * Properties of entity ThreadInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property FileId = new Property(1, String.class, "fileId", false, "FILE_ID");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property Md5 = new Property(3, String.class, "md5", false, "MD5");
        public final static Property Finished = new Property(4, int.class, "finished", false, "FINISHED");
        public final static Property Rate = new Property(5, String.class, "rate", false, "RATE");
        public final static Property Over = new Property(6, Boolean.class, "over", false, "OVER");
        public final static Property Overtime = new Property(7, String.class, "overtime", false, "OVERTIME");
        public final static Property Start = new Property(8, Integer.class, "start", false, "START");
        public final static Property End = new Property(9, Integer.class, "end", false, "END");
    }


    public ThreadInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ThreadInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"THREAD_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"FILE_ID\" TEXT," + // 1: fileId
                "\"URL\" TEXT," + // 2: url
                "\"MD5\" TEXT," + // 3: md5
                "\"FINISHED\" INTEGER NOT NULL ," + // 4: finished
                "\"RATE\" TEXT," + // 5: rate
                "\"OVER\" INTEGER," + // 6: over
                "\"OVERTIME\" TEXT," + // 7: overtime
                "\"START\" INTEGER," + // 8: start
                "\"END\" INTEGER);"); // 9: end
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"THREAD_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ThreadInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String fileId = entity.getFileId();
        if (fileId != null) {
            stmt.bindString(2, fileId);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(4, md5);
        }
        stmt.bindLong(5, entity.getFinished());
 
        String rate = entity.getRate();
        if (rate != null) {
            stmt.bindString(6, rate);
        }
 
        Boolean over = entity.getOver();
        if (over != null) {
            stmt.bindLong(7, over ? 1L: 0L);
        }
 
        String overtime = entity.getOvertime();
        if (overtime != null) {
            stmt.bindString(8, overtime);
        }
 
        Integer start = entity.getStart();
        if (start != null) {
            stmt.bindLong(9, start);
        }
 
        Integer end = entity.getEnd();
        if (end != null) {
            stmt.bindLong(10, end);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ThreadInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String fileId = entity.getFileId();
        if (fileId != null) {
            stmt.bindString(2, fileId);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(4, md5);
        }
        stmt.bindLong(5, entity.getFinished());
 
        String rate = entity.getRate();
        if (rate != null) {
            stmt.bindString(6, rate);
        }
 
        Boolean over = entity.getOver();
        if (over != null) {
            stmt.bindLong(7, over ? 1L: 0L);
        }
 
        String overtime = entity.getOvertime();
        if (overtime != null) {
            stmt.bindString(8, overtime);
        }
 
        Integer start = entity.getStart();
        if (start != null) {
            stmt.bindLong(9, start);
        }
 
        Integer end = entity.getEnd();
        if (end != null) {
            stmt.bindLong(10, end);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ThreadInfo readEntity(Cursor cursor, int offset) {
        ThreadInfo entity = new ThreadInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fileId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // md5
            cursor.getInt(offset + 4), // finished
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // rate
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // over
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // overtime
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // start
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // end
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ThreadInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFileId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMd5(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFinished(cursor.getInt(offset + 4));
        entity.setRate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOver(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setOvertime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStart(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setEnd(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ThreadInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ThreadInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ThreadInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
